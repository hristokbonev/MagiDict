from typing import Any, Iterable, List, Mapping, Union

class MagiDict(dict):
    def __init__(self, *args: Union[dict, Mapping], **kwargs: Any) -> None: ...
    def __getitem__(self, keys: Union[Any, Iterable[Any]]) -> Any: ...
    def __getattr__(self, name: str) -> Any: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __deepcopy__(self, memo: dict[int, Any]) -> "MagiDict": ...
    def copy(self) -> "MagiDict": ...
    def update(self, *args: Any, **kwargs: Any) -> None: ...
    def mget(self, key: Any, default: Any = ...) -> Any: ...
    def mg(self, key: Any, default: Any = ...) -> Any: ...
    def strict_get(self, key: Any) -> Any: ...
    def sget(self, key: Any) -> Any: ...
    def sg(self, key: Any) -> Any: ...
    def disenchant(self) -> dict: ...
    def search_key(self, key: Any, default: Any = None) -> Any: ...
    def search_keys(self, key: Any) -> List[Any]: ...
    def filter(self, function: Any = None, drop_empty: bool = False) -> "MagiDict": ...

def enchant(d: dict) -> MagiDict: ...
def magi_load(fp: Any, **kwargs: Any) -> MagiDict: ...
def magi_loads(s: str, **kwargs: Any) -> MagiDict: ...
def none(obj: Any) -> Any: ...

__all__ = ["MagiDict", "enchant", "magi_load", "magi_loads", "none"]
